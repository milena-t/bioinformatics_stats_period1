##################################################################################################################################
#### R practical on clustering using MDS/PCA in GWAS and expression studies and methods for multiple testing correction			##
####									14.10.2020  A Husby 																	##
##################################################################################################################################


The aim of this practical is to get some hands on experience with two important issues in statistical genetics covered in the lecture

1) confounding in terms of structure or clustering of data
2) the problem of multiple testing

In order to reach these goals we will
1) examine how we can use MDS and PCA methods that you have used earlier in the course in the context of statistical genetics first on genotype data
2) Look at two common methods for adjusting FWER (Bonferroni) and FDR (Benjamni Hochberg, BH procdure) 

###########################################################################
### Methods for visualizing structure in statistical genetics ####
###########################################################################

# get data from website of Applied Statistical Genetics of Andrea Foulkes:

fmsURL <- "http://www.stat-gen.org/book.e1/data/FMS_data.txt"

fms <- read.delim(file=fmsURL, header=T, sep="\t")

#look at the first records of the dataframe

head(fms) #

attach(fms) # attach dataframe

#Examining population structure and generating similarity matrices from genetic data

#We will use the information about the genotypes of individuals to estimate the genetic distance between them (see lecture notes) and will use the 24 SNPs within the akt1 gene to do this.

#Step 1: extract the SNP genotypes for the akt 1 gene

NamesAkt1Snps <- names(fms)[substr(names(fms),1,4)=="akt1"] #Note use of substring function to pull out snp names with akt1 included

length(NamesAkt1Snps) # 24 SNPs within this gene 

#Step 2: genotypes are given by letters and we need to convert these to numbers instead

FMSgeno <- fms[,is.element(names(fms),NamesAkt1Snps)] 
FMSgenoNum <- data.matrix(FMSgeno)
FMSgenoNum[is.na(FMSgenoNum)] <- 4 # give missing genotypes the value 4

#Step 3: we ue the r function dist (see ?dist) to create a distance matrix based on the genotypes

DistFmsGeno <- as.matrix(dist(FMSgenoNum)) 

DistFmsGeno[1:5,1:5]

#We now have a matrix describing the euclidean distance between individuals in our dataset that we can use fo visualizing population structure. We will take two approaches to this that have been discussed in the course

#Multidimensional scaling (MDS)

plot(cmdscale(DistFmsGeno),xlab="C1",ylab="C2")
abline(v=0,lty=2)
abline(h=4,lty=2)

#Principal Component Analysis (PCA)

PCFMS <- prcomp(FMSgenoNum)
plot(PCFMS$"x"[,1],PCFMS$"x"[,2],xlab="PC1",ylab="PC2")


#########################################
#### Correcting for multiple testing ####
########################################


#Several publicly available datasets that include viral sequence information, treatment histories and clinical measures of disease #progression for HIV- infected individuals are downloadable at the Stanford Resistance Database: http://hivdb.stanford.edu/. In this text #we consider a data set generated by VircoTM, which includes protease (Pr) sequence information on 1066 viral isolates and corresponding #fold-resistance measures for each of eight Pr inhibitors. Fold resistance is a comparative measure of responsiveness to a drug, where #the referent value is for a wildtype or consensus virus. The consensus AA at a site on the viral genome is defined as the AA that is #most common at this site in the general population. The data are comma delimited and contained in the file Virco data.csv on the #textbook website. We use the read.csv() function in R to read in the data:

vircoURL <- "http://www.stat-gen.org/book.e1/data/Virco_data.csv"
virco <- read.csv(file=vircoURL, header=T, sep=",")

attach(virco)


#In this example, we test for associations between mutations in the protease region of the HIV genome and the difference between #indinavir (IDV) and nelfinavir (NFV) fold resistance based on the Virco data available above

PrMut <- virco[,23:121]!="-" & virco[,23:121]!="."  

NObs <- dim(virco)[1]

PrMutSub <-data.frame(PrMut[ , apply(PrMut,2,sum) > NObs*.05])

Trait <- IDV.Fold - NFV.Fold

#make a test comparing individuals with and without the mutation using a t.test
TtestP <- function(Geno){
return(t.test(Trait[Geno==1],
Trait[Geno==0], na.rm=T)$"p.value")
}

Pvec <- apply(PrMutSub, 2, TtestP)

sort(Pvec)

# which mutations are significant at P < 0.05

names(PrMutSub)[Pvec < 0.05]


Q1: How many tests are we carrying out here and what would be the FWER without correction? (Hint: see formulae on lecture notes)

Q2: What is the Bonferroni correction method and how would you apply it here?

# We can use Bonferroni adjustment method to obtain a new list of significant mutations 
PvecAdj <- p.adjust(Pvec, method="bonferroni") 

sort(PvecAdj)

names(PrMutSub)[PvecAdj < 0.05] #print names of mutations that are significant after Bonferroni correction


Q3: Now lets instead apply the FDR to our example above. Using the lecture notes, what is k here and how many mutations are signficant at FDR of 5%? Look at the p.adjust function and use that to apply the BH correction.

PvecBH <- p.adjust(Pvec, method="BH") 

names(PrMutSub)[PvecBH < 0.05] #print names of mutations significant after FDR correction at 5%






